name: üöÄ ORA AI ÏÑúÎ≤Ñ (LLM/TTS) Î∞∞Ìè¨

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    name: üèóÔ∏è Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & ECR Ìë∏Ïãú
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    strategy:
      matrix:
        include:
          - service: llm-server
            directory: LLM_server
            dockerfile: dockerfile
          
          - service: tts-server
            directory: TTS_server
            dockerfile: dockerfile

    steps:
      - name: ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: AWS Ïù∏Ï¶ù (OIDC AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::319641749746:role/ai-server-backup
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}-${{ matrix.service }}

      - name: ECR Î°úÍ∑∏Ïù∏
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker ÎπåÎìú & Ìë∏Ïãú (${{ matrix.service }})
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail

          SERVICE=${{ matrix.service }}
          DIR=${{ matrix.directory }}
          DOCKERFILE=${{ matrix.dockerfile }}

          ECR_IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${SERVICE}

          echo "Building ${SERVICE} from ${DIR}/${DOCKERFILE}"
          docker build -f "${DIR}/${DOCKERFILE}" -t "${ECR_IMAGE_URI}:${IMAGE_TAG}" "${DIR}"
          docker tag "${ECR_IMAGE_URI}:${IMAGE_TAG}" "${ECR_IMAGE_URI}:latest"

          echo "Pushing ${SERVICE} to ECR"
          docker push "${ECR_IMAGE_URI}:${IMAGE_TAG}"
          docker push "${ECR_IMAGE_URI}:latest"

  deploy:
    name: üöÄ AI ÏÑúÎ≤Ñ ÏõêÍ≤© Î∞∞Ìè¨ (docker compose)
    runs-on: ubuntu-latest
    needs: build_and_push

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ap-northeast-2

    steps:
      - name: AWS Ïù∏Ï¶ù (OIDC AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::319641749746:role/ai-server-backup
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}-deploy

      - name: ECR ÌÜ†ÌÅ∞ Î∞úÍ∏â
        id: token
        run: |
          set -euo pipefail
          echo "token=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT

      - name: Bastion SSH ÌÇ§ ÏÑ§Ï†ï
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_SSH_KEY }}" > ~/.ssh/bastion_key.pem
          chmod 600 ~/.ssh/bastion_key.pem

      - name: Bastion Í≤ΩÏú† Compose Î∞∞Ìè¨ 
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION:      ${{ env.AWS_REGION }}
          BASTION_USER:    ${{ secrets.BASTION_USER }}
          BASTION_HOST:    ${{ secrets.BASTION_HOST }}
          TARGET_USER:     ${{ secrets.TARGET_USER }}
          TARGET_HOST:     ${{ secrets.TARGET_HOST }}
          ECR_TOKEN:       ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail

          # ÌïÑÏàò Í∞í ÌôïÏù∏
          : "${BASTION_USER:?BASTION_USER missing}"
          : "${BASTION_HOST:?BASTION_HOST missing}"
          : "${TARGET_USER:?TARGET_USER missing}"
          : "${TARGET_HOST:?TARGET_HOST missing}"

          REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion_key.pem \
            "${BASTION_USER}@${BASTION_HOST}" bash -s <<DEPLOY
          set -euo pipefail

          ssh -o StrictHostKeyChecking=no -i ~/ora-ai.pem ${TARGET_USER}@${TARGET_HOST} bash -s <<INNER
          set -euo pipefail

          echo "üîê ECR Î°úÍ∑∏Ïù∏ Ï§ë..."
          echo "$ECR_TOKEN" | docker login --username AWS --password-stdin "${REGISTRY}"

          echo "‚èπÔ∏è  AI ÏÑúÎ≤ÑÎì§Îßå Ï§ëÏßÄ Ï§ë..."
          cd ~
          docker compose -f compose.yml stop llm_server  tts_server || true
          docker compose -f compose.yml rm -f llm_server tts_server || true

          echo "üì• ÏµúÏã† Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Ï§ë..."
          # ÏµúÏã† Ïù¥ÎØ∏ÏßÄ pull
          docker compose -f compose.yml pull

          echo "üöÄ ÏÉà ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë..."
          # ÏÉàÎ°úÏö¥ Ïª®ÌÖåÏù¥ÎÑàÎ°ú ÏÑúÎπÑÏä§ ÏãúÏûë
          docker compose -f compose.yml up -d

          echo "üßπ ÏãúÏä§ÌÖú Ï†ïÎ¶¨ Ï§ë..."
          # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
          docker system prune -af --volumes || true
          
          echo "‚úÖ Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏..."
          # ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
          docker compose -f compose.yml ps
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
          
          echo "üìä ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏..."
          df -h / || true
          docker system df || true
          INNER
          DEPLOY

      - name: ‚úÖ Î∞∞Ìè¨ ÏôÑÎ£å
        run: |
          echo "üéâ LLM/TTS Ïû¨Î∞∞Ìè¨ ÏôÑÎ£å!"
          echo "- Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏôÑÏ†Ñ Ï†ïÎ¶¨"
          echo "- ÏµúÏã† Ïù¥ÎØ∏ÏßÄÎ°ú ÏÉà ÏÑúÎπÑÏä§ ÏãúÏûë"
          echo "- ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨"