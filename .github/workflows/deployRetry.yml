name: üöÄ ORA AI ÏÑúÎ≤Ñ Ïû¨Î∞∞Ìè¨ (ÏÑ†ÌÉùÏ†Å)

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

permissions:
  id-token: write
  contents: read

jobs:
  redeploy:
    name: üîÑ AI ÏÑúÎ≤Ñ Ïû¨Î∞∞Ìè¨ (ECR latest ‚Üí Bastion ‚Üí Compose)
    runs-on: ubuntu-latest

    steps:
      - name: AWS Ïù∏Ï¶ù (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::319641749746:role/ai-server-backup
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: redeploy-${{ github.run_id }}

      - name: ECR ÌÜ†ÌÅ∞ Î∞úÍ∏â
        id: token
        run: |
          set -euo pipefail
          echo "token=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT

      - name: Bastion SSH ÌÇ§ ÏÑ§Ï†ï
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_SSH_KEY }}" > ~/.ssh/bastion_key.pem
          chmod 600 ~/.ssh/bastion_key.pem

      - name: Bastion Í≤ΩÏú† AI ÏÑúÎ≤Ñ ÏÑ†ÌÉùÏ†Å Ïû¨Î∞∞Ìè¨
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION:      ${{ env.AWS_REGION }}
          BASTION_USER:    ${{ secrets.BASTION_USER }}
          BASTION_HOST:    ${{ secrets.BASTION_HOST }}
          TARGET_USER:     ${{ secrets.TARGET_USER }}
          TARGET_HOST:     ${{ secrets.TARGET_HOST }}
          ECR_TOKEN:       ${{ steps.token.outputs.token }}
        run: |
          set -euo pipefail

          # ÌïÑÏàò Í∞í ÌôïÏù∏
          : "${BASTION_USER:?BASTION_USER missing}"
          : "${BASTION_HOST:?BASTION_HOST missing}"
          : "${TARGET_USER:?TARGET_USER missing}"
          : "${TARGET_HOST:?TARGET_HOST missing}"

          REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bastion_key.pem \
            "${BASTION_USER}@${BASTION_HOST}" bash -s <<DEPLOY
          set -euo pipefail

          ssh -o StrictHostKeyChecking=no -i ~/ora-ai.pem \
            "${TARGET_USER}@${TARGET_HOST}" bash -s <<INNER
          set -euo pipefail

          echo "üîê ECR Î°úÍ∑∏Ïù∏ Ï§ë..."
          echo "${ECR_TOKEN}" | docker login --username AWS --password-stdin "${REGISTRY}"

          echo "‚èπÔ∏è  AI ÏÑúÎ≤ÑÎì§Îßå Ï§ëÏßÄ Ï§ë..."
          cd ~
          # AI ÏÑúÎ≤Ñ 3Í∞úÎßå ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú Ï§ëÏßÄ Î∞è Ï†úÍ±∞ (Ïù∏ÌîÑÎùºÎäî Ïú†ÏßÄ)
          docker compose -f compose.yml stop llm_server  tts_server || true
          docker compose -f compose.yml rm -f llm_server  tts_server || true

          echo "üì• AI ÏÑúÎ≤Ñ ÏµúÏã† Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú Ï§ë..."
          # AI ÏÑúÎ≤Ñ Ïù¥ÎØ∏ÏßÄÎßå pull
          docker compose -f compose.yml pull llm_server  tts_server

          echo "üöÄ AI ÏÑúÎ≤ÑÎì§ Ïû¨ÏãúÏûë Ï§ë..."
          # AI ÏÑúÎ≤ÑÎì§Îßå ÏÉàÎ°ú ÏãúÏûë (Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§Îì§ÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ)
          docker compose -f compose.yml up -d llm_server  tts_server

          echo "üßπ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄÎßå Ï†ïÎ¶¨ Ï§ë..."
          # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄÎßå Ï†ïÎ¶¨ (Î≥ºÎ•®Í≥º ÎÑ§Ìä∏ÏõåÌÅ¨Îäî Î≥¥Ï°¥)
          docker image prune -af || true
          
          echo "‚úÖ AI ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏..."
          # AI ÏÑúÎ≤ÑÎì§ ÏÉÅÌÉú ÌôïÏù∏
          docker compose -f compose.yml ps llm_server  tts_server
          docker ps --filter "name=llm_server" --filter  "name=tts_server" --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
          
          echo "üìä ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏..."
          df -h / || true
          docker system df || true
          INNER
          DEPLOY

      - name: ‚úÖ Ïû¨Î∞∞Ìè¨ ÏôÑÎ£å
        run: |
          echo "üéâ AI ÏÑúÎ≤Ñ ÏÑ†ÌÉùÏ†Å Ïû¨Î∞∞Ìè¨ ÏôÑÎ£å!"
          echo "- LLM/TTS ÏÑúÎ≤ÑÎßå latest Ïù¥ÎØ∏ÏßÄÎ°ú ÏóÖÎç∞Ïù¥Ìä∏"
          echo "- Ïù∏ÌîÑÎùº ÏÑúÎπÑÏä§Îì§(Kafka, Redis Îì±)ÏùÄ Ïú†ÏßÄ"
          echo "- ÎπåÎìú ÏóÜÏù¥ ECR latest Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©"