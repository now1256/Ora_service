"""
Django settings for LLM_server project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.LLM_server.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.LLM_server.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path


TIME_ZONE = 'Asia/Seoul'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.LLM_server.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6pc)^&2_8h$wr8=lg6=2ezwkyq^hq%k6#_m^e4*o+5uce2c1vu"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# settings.py
ALLOWED_HOSTS = [
    '*'  # 개발환경에서는 모든 호스트 허용 (Docker 환경)
]

#₩
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "ai.apps.AiConfig",
    
]
 
# ASGI 설정
ASGI_APPLICATION = 'LLM_server.asgi.application'


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "django.middleware.common.CommonMiddleware",  # Docker 환경에서 호스트 검증 문제로 임시 비활성화
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "LLM_server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LLM_server.wsgi.application"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
AUDIO_FILES_DIR = os.path.join(BASE_DIR, 'audio_files')


# Database
# https://docs.LLM_server.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.LLM_server.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.LLM_server.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.LLM_server.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.LLM_server.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {name} {module} - {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} - {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # WebSocket 관련 로거 추가
        'channels': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'websocket': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 앱별 로거 (실제 앱 이름으로 변경)
        'ORAAISERVER': {  # 실제 앱 이름으로 변경하세요
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # 모든 로거 캐치
        '': {  # 루트 로거
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

